      ****** GITHUB ***********

COMMANDE BASE TERMINAL :

  -- ls:  Affiche les fichiers du repertoire, ls-a (fichiers caches)

  -- cd <repository name>:   Acceder a un repertoire
     cd .. :   Pour remonter au répertoire parent

  -- touch <new file name>:  Creer un nouveau fichier


*****  CREER UN REFERENTIEL: 

 Pour mettre votre projet sur GitHub, vous devrez créer un référentiel dans
 lequel il pourra vivre.


 ____ Cliquez sur le + dans le coin supérieur droit, puis cliquez sur
  « Nouveau référentiel »

 ____ Créer un nom de référentiel qui décrit votre projet
  


*****    CLONER UN REFERENTIEL:

  Lorsque vous clonez un référentiel, vous copiez le référentiel de GitHub sur votre machine locale.

  Les fichiers README sont un excellent endroit pour décrire votre projet plus en déta

 ____ Cliquez sur le bouton vert « Clone ou téléchargement » sur la
 page de votre référentiel, puis copiez l’URL qui apparaît. Si vous
 n’avez pas créé de README, ce lien apparaîtra en haut de la page
 dans la section « Installation rapide ».


 ---> git clone <repository url>

 Dans votre terminal, exécutez . Cela permettra de télécharger
 le référentiel sur votre ordinateur. Si vous n’avez pas créé un README,
 vous obtiendrez l’avertissement: C’est normal, et il n’y a pas besoin
 de s’inquiéter à ce sujet.  ---> git clone <repository url>
 You appear to have cloned into an empty repository.




*****  AJOUTER NOUVEAUX DOSSIERS:

 ---> git add <new file name>

 Maintenant, pour faire savoir à Git qu’il doit suivre le nouveau fichier
 que vous avez fait, exécutez   
    git add <new file name> :  pour suivre ce fichier spécifique,
    git add .  :  pour suivre tous les fichiers dans ce répertoire


****  COMMIT:

 Un commit est comme un instantané de tous les fichiers de votre projet à un moment donné.
 Valider ces modifications :

 ( ---> git add <new file name> )
 Si vous modifiez un fichier après avoir exécuté git add, sans valider  vous devez exécuter git add
 a nouveau pour mettre en scène la dernière version du fichier:

 --->    git commit -m "some message"
 Message décrit les modifications que vous venez d'effectuer.

 --->    git status
 Pour voir comment notre code se compare au code sur le référentiel distant.

 --->    git push 
 Pour publier nos commits locaux sur Github.

 --->    git commit -am "some message"
 Cette commande validera toutes les modifications que vous avez apportées.
 Si vous avez seulement changé les fichiers existants et non créé de nouveaux

 --->    git pull
 Extraire toutes les modifications distantes de votre référentiel.

 --->    git log 
 Donne un historique de tous vos commits sur ce référentiel. 

 --->    git reset --hard <commit>
 Rétablit votre code exactement comme il était après la validation spécifiée

 --->    git reset --hard origin/master
 Rétablit votre code à la version actuellement stockée en ligne sur Github.


*****  BRANCHING :
